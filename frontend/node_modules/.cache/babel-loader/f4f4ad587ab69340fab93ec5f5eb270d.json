{"ast":null,"code":"var _jsxFileName = \"/Users/oceane/Documents/Sites/clone-twitch/frontend/src/components/TopStream/index.js\";\nimport React, { useEffect, useState } from 'react';\nimport Axios from 'axios';\nimport Config from '../Connexion';\n\nconst TopStreams = () => {\n  const oToken = sessionStorage.getItem('theToken');\n  const [channels, setChannels] = useState([]);\n  useEffect(() => {\n    const fetchData = async () => {\n      const result = await Axios.create({\n        headers: {\n          'Client-ID': Config.clientID,\n          'Authorization': 'Bearer ' + oToken\n        }\n      }).get('https://api.twitch.tv/helix/streams');\n      let dataArray = result.data.data; // console.log(dataArray);\n\n      let gameIDs = dataArray.map(stream => {\n        return stream.game_id;\n      });\n      let userIDs = dataArray.map(stream => {\n        return stream.user_id;\n      }); //Creation des URLs personnalisées\n\n      let baseUrlGames = \"https://api.twitch.tv/helix/games?\";\n      let baseUrlUsers = \"https://api.twitch.tv/helix/users?\";\n      let queryParamsGame = \"\";\n      let queryParamsUsers = \"\";\n      gameIDs.map(id => {\n        return queryParamsGame = queryParamsGame + `id=${id}&`;\n      });\n      userIDs.map(id => {\n        return queryParamsUsers = queryParamsUsers + `id=${id}&`;\n      }); //URL final\n\n      let urlFinalGames = baseUrlGames + queryParamsGame;\n      let urlFinalUsers = baseUrlUsers + queryParamsUsers; //Appels\n\n      let gamesNames = await Axios.create({\n        headers: {\n          'Client-ID': Config.clientID,\n          'Authorization': 'Bearer ' + oToken\n        }\n      }).get(urlFinalGames);\n      let getUsers = await Axios.create({\n        headers: {\n          'Client-ID': Config.clientID,\n          'Authorization': 'Bearer ' + oToken\n        }\n      }).get(urlFinalUsers);\n      let gamesNameArray = gamesNames.data.data;\n      let userArray = getUsers.data.data; // console.log(gamesNameArray, userArray);\n      //Création du tableau final\n\n      let finalArray = dataArray.map(stream => {\n        stream.gameName = \"\";\n        stream.login = \"\";\n        gamesNameArray.forEach(name => {\n          userArray.forEach(user => {\n            if (stream.user_id === user.id && stream.game_id === name.id) {\n              stream.gameName = name.name;\n              stream.login = user.login;\n            }\n          });\n        });\n        let newUrl = stream.thumbnail_url.replace('{width}', \"320\").replace('{height}', \"180\");\n        stream.thumbnail_url = newUrl;\n        return stream;\n      });\n      setChannels(finalArray);\n    };\n\n    fetchData();\n  }, []);\n  console.log(channels);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 2\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    className: \"titreGames\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 2\n    }\n  }, \"Stream les plus populaires\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"flexAccueil\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 2\n    }\n  }, channels.map((channel, index) => /*#__PURE__*/React.createElement(\"div\", {\n    key: index,\n    className: \"carteStream\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 2\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    src: channel.thumbnail_url,\n    alt: \"image-jeu\",\n    className: \"imgCarte\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 2\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"cardBodyStream\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 2\n    }\n  }, /*#__PURE__*/React.createElement(\"h5\", {\n    className: \"titreCartesStream\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 2\n    }\n  }, channel.user_name), /*#__PURE__*/React.createElement(\"p\", {\n    className: \"txtStream viewers\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 2\n    }\n  }, \"Viewers : \", channel.viewer_count), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"btnCarte\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 2\n    }\n  }, \"Regarder \", channel.user_name))))));\n};\n\nexport default TopStreams;","map":{"version":3,"sources":["/Users/oceane/Documents/Sites/clone-twitch/frontend/src/components/TopStream/index.js"],"names":["React","useEffect","useState","Axios","Config","TopStreams","oToken","sessionStorage","getItem","channels","setChannels","fetchData","result","create","headers","clientID","get","dataArray","data","gameIDs","map","stream","game_id","userIDs","user_id","baseUrlGames","baseUrlUsers","queryParamsGame","queryParamsUsers","id","urlFinalGames","urlFinalUsers","gamesNames","getUsers","gamesNameArray","userArray","finalArray","gameName","login","forEach","name","user","newUrl","thumbnail_url","replace","console","log","channel","index","user_name","viewer_count"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport Axios from 'axios';\nimport Config from '../Connexion';\n\nconst TopStreams = () => {\n\n const oToken = sessionStorage.getItem('theToken');\n\n const [channels, setChannels] = useState([]);\n\n useEffect(() => {\n const fetchData = async () => {\n const result = await Axios.create({\n headers: {\n 'Client-ID' : Config.clientID,\n 'Authorization' : 'Bearer ' + oToken\n }\n }).get('https://api.twitch.tv/helix/streams');\n\n let dataArray = result.data.data;\n // console.log(dataArray);\n\n let gameIDs = dataArray.map( stream => {\n return stream.game_id;\n });\n\n let userIDs = dataArray.map( stream => {\n return stream.user_id;\n });\n\n //Creation des URLs personnalisées\n let baseUrlGames = \"https://api.twitch.tv/helix/games?\"\n let baseUrlUsers = \"https://api.twitch.tv/helix/users?\"\n\n let queryParamsGame = \"\";\n let queryParamsUsers = \"\";\n\n gameIDs.map(id => {\n return (queryParamsGame = queryParamsGame + `id=${id}&`)\n });\n userIDs.map(id => {\n return (queryParamsUsers = queryParamsUsers + `id=${id}&`)\n });\n\n //URL final\n let urlFinalGames = baseUrlGames + queryParamsGame;\n let urlFinalUsers = baseUrlUsers + queryParamsUsers;\n\n //Appels\n let gamesNames = await Axios.create({\n headers: {\n 'Client-ID' : Config.clientID,\n 'Authorization' : 'Bearer ' + oToken\n }\n }).get(urlFinalGames);\n let getUsers = await Axios.create({\n headers: {\n 'Client-ID' : Config.clientID,\n 'Authorization' : 'Bearer ' + oToken\n }\n }).get(urlFinalUsers);\n\n let gamesNameArray = gamesNames.data.data;\n let userArray = getUsers.data.data;\n\n // console.log(gamesNameArray, userArray);\n\n //Création du tableau final\n let finalArray = dataArray.map(stream => {\n\n stream.gameName = \"\";\n stream.login = \"\";\n\n gamesNameArray.forEach(name => {\n userArray.forEach(user => {\n if(stream.user_id === user.id && stream.game_id === name.id) {\n stream.gameName = name.name;\n stream.login = user.login;\n }\n })\n });\n\n let newUrl = stream.thumbnail_url.replace('{width}', \"320\").replace('{height}', \"180\");\n stream.thumbnail_url = newUrl;\n\n return stream\n })\n\n setChannels(finalArray);\n\n }\n\n fetchData();\n }, [])\n\n console.log(channels);\n\n return(\n <div className=\"\">\n <h1 className=\"titreGames\">Stream les plus populaires</h1>\n <div className=\"flexAccueil\">\n {channels.map((channel, index) => ( \n <div key={index} className=\"carteStream\">\n <img src={channel.thumbnail_url} alt=\"image-jeu\" className=\"imgCarte\"/>\n\n <div className=\"cardBodyStream\">\n <h5 className=\"titreCartesStream\">{channel.user_name}</h5>\n <p className=\"txtStream viewers\">Viewers : {channel.viewer_count}</p>\n\n <div className=\"btnCarte\">Regarder {channel.user_name}</div>\n </div>\n </div>\n ))}\n </div>\n </div>\n )\n}\n\nexport default TopStreams;"]},"metadata":{},"sourceType":"module"}