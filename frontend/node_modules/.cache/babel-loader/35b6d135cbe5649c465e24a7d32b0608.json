{"ast":null,"code":"var _jsxFileName = \"/Users/oceane/Documents/Sites/clone-twitch/frontend/src/components/TopStreams/index.js\";\nimport React, { useEffect, useState } from 'react';\nimport Axios from 'axios';\nimport Config from '../Config';\nimport { Link } from 'react-router-dom';\n\nconst TopStreams = () => {\n  const oToken = sessionStorage.getItem('theToken');\n  const [channels, setChannels] = useState([]);\n  useEffect(() => {\n    const fetchData = async () => {\n      const result = await Axios.create({\n        headers: {\n          'Client-ID': Config.clientID,\n          'Authorization': 'Bearer ' + oToken\n        }\n      }).get('https://api.twitch.tv/helix/streams');\n      let dataArray = result.data.data; // console.log(dataArray);\n\n      let gameIDs = dataArray.map(stream => {\n        return stream.game_id;\n      });\n      let userIDs = dataArray.map(stream => {\n        return stream.user_id;\n      }); //Creation des URLs personnalisées\n\n      let baseUrlGames = \"https://api.twitch.tv/helix/games?\";\n      let baseUrlUsers = \"https://api.twitch.tv/helix/users?\";\n      let queryParamsGame = \"\";\n      let queryParamsUsers = \"\";\n      gameIDs.map(id => {\n        return queryParamsGame = queryParamsGame + `id=${id}&`;\n      });\n      userIDs.map(id => {\n        return queryParamsUsers = queryParamsUsers + `id=${id}&`;\n      }); //URL final\n\n      let urlFinalGames = baseUrlGames + queryParamsGame;\n      let urlFinalUsers = baseUrlUsers + queryParamsUsers; //Appels\n\n      let gamesNames = await Axios.create({\n        headers: {\n          'Client-ID': Config.clientID,\n          'Authorization': 'Bearer ' + oToken\n        }\n      }).get(urlFinalGames);\n      let getUsers = await Axios.create({\n        headers: {\n          'Client-ID': Config.clientID,\n          'Authorization': 'Bearer ' + oToken\n        }\n      }).get(urlFinalUsers);\n      let gamesNameArray = gamesNames.data.data;\n      let userArray = getUsers.data.data; // console.log(gamesNameArray, userArray);\n      //Création du tableau final\n\n      let finalArray = dataArray.map(stream => {\n        stream.gameName = \"\";\n        stream.login = \"\";\n        gamesNameArray.forEach(name => {\n          userArray.forEach(user => {\n            if (stream.user_id === user.id && stream.game_id === name.id) {\n              stream.gameName = name.name;\n              stream.login = user.login;\n            }\n          });\n        });\n        let newUrl = stream.thumbnail_url.replace('{width}', \"320\").replace('{height}', \"180\");\n        stream.thumbnail_url = newUrl;\n        return stream;\n      });\n      setChannels(finalArray);\n    };\n\n    fetchData();\n  }, [oToken]); // console.log(channels);\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    className: \"titreGames\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 13\n    }\n  }, \"Stream les plus populaires\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"flexAccueil\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 13\n    }\n  }, channels.map((channel, index) => /*#__PURE__*/React.createElement(\"div\", {\n    key: index,\n    className: \"carteStream\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    src: channel.thumbnail_url,\n    alt: \"image-jeu\",\n    className: \"imgCarte\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 25\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"cardBodyStream\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(\"h5\", {\n    className: \"titreCartesStream\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 29\n    }\n  }, channel.user_name), /*#__PURE__*/React.createElement(\"p\", {\n    className: \"txtStream viewers\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 29\n    }\n  }, \"Viewers : \", channel.viewer_count), /*#__PURE__*/React.createElement(Link, {\n    className: \"lien\",\n    to: {\n      pathname: `/live/${channel.login}`\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"btnCarte\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 33\n    }\n  }, \"Regarder \", channel.user_name)))))));\n};\n\nexport default TopStreams;","map":{"version":3,"sources":["/Users/oceane/Documents/Sites/clone-twitch/frontend/src/components/TopStreams/index.js"],"names":["React","useEffect","useState","Axios","Config","Link","TopStreams","oToken","sessionStorage","getItem","channels","setChannels","fetchData","result","create","headers","clientID","get","dataArray","data","gameIDs","map","stream","game_id","userIDs","user_id","baseUrlGames","baseUrlUsers","queryParamsGame","queryParamsUsers","id","urlFinalGames","urlFinalUsers","gamesNames","getUsers","gamesNameArray","userArray","finalArray","gameName","login","forEach","name","user","newUrl","thumbnail_url","replace","channel","index","user_name","viewer_count","pathname"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAmB,WAAnB;AACA,SAASC,IAAT,QAAqB,kBAArB;;AAEA,MAAMC,UAAU,GAAG,MAAM;AAErB,QAAMC,MAAM,GAAGC,cAAc,CAACC,OAAf,CAAuB,UAAvB,CAAf;AAEA,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BT,QAAQ,CAAC,EAAD,CAAxC;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACZ,UAAMW,SAAS,GAAG,YAAY;AAC1B,YAAMC,MAAM,GAAG,MAAMV,KAAK,CAACW,MAAN,CAAa;AAClCC,QAAAA,OAAO,EAAE;AACL,uBAAcX,MAAM,CAACY,QADhB;AAEL,2BAAkB,YAAYT;AAFzB;AADyB,OAAb,EAKlBU,GALkB,CAKd,qCALc,CAArB;AAOA,UAAIC,SAAS,GAAGL,MAAM,CAACM,IAAP,CAAYA,IAA5B,CAR0B,CAS1B;;AAEA,UAAIC,OAAO,GAAGF,SAAS,CAACG,GAAV,CAAeC,MAAM,IAAI;AACnC,eAAOA,MAAM,CAACC,OAAd;AACH,OAFa,CAAd;AAIA,UAAIC,OAAO,GAAGN,SAAS,CAACG,GAAV,CAAeC,MAAM,IAAI;AACnC,eAAOA,MAAM,CAACG,OAAd;AACH,OAFa,CAAd,CAf0B,CAmB1B;;AACA,UAAIC,YAAY,GAAG,oCAAnB;AACA,UAAIC,YAAY,GAAG,oCAAnB;AAEA,UAAIC,eAAe,GAAG,EAAtB;AACA,UAAIC,gBAAgB,GAAG,EAAvB;AAEAT,MAAAA,OAAO,CAACC,GAAR,CAAYS,EAAE,IAAI;AACd,eAAQF,eAAe,GAAGA,eAAe,GAAI,MAAKE,EAAG,GAArD;AACH,OAFD;AAGAN,MAAAA,OAAO,CAACH,GAAR,CAAYS,EAAE,IAAI;AACd,eAAQD,gBAAgB,GAAGA,gBAAgB,GAAI,MAAKC,EAAG,GAAvD;AACH,OAFD,EA7B0B,CAiC1B;;AACA,UAAIC,aAAa,GAAGL,YAAY,GAAGE,eAAnC;AACA,UAAII,aAAa,GAAGL,YAAY,GAAGE,gBAAnC,CAnC0B,CAqC1B;;AACA,UAAII,UAAU,GAAG,MAAM9B,KAAK,CAACW,MAAN,CAAa;AACpCC,QAAAA,OAAO,EAAE;AACL,uBAAcX,MAAM,CAACY,QADhB;AAEL,2BAAkB,YAAYT;AAFzB;AAD2B,OAAb,EAKpBU,GALoB,CAKhBc,aALgB,CAAvB;AAMA,UAAIG,QAAQ,GAAG,MAAM/B,KAAK,CAACW,MAAN,CAAa;AAClCC,QAAAA,OAAO,EAAE;AACL,uBAAcX,MAAM,CAACY,QADhB;AAEL,2BAAkB,YAAYT;AAFzB;AADyB,OAAb,EAKlBU,GALkB,CAKde,aALc,CAArB;AAOA,UAAIG,cAAc,GAAGF,UAAU,CAACd,IAAX,CAAgBA,IAArC;AACA,UAAIiB,SAAS,GAAGF,QAAQ,CAACf,IAAT,CAAcA,IAA9B,CApD0B,CAsD1B;AAEA;;AACA,UAAIkB,UAAU,GAAGnB,SAAS,CAACG,GAAV,CAAcC,MAAM,IAAI;AAEzCA,QAAAA,MAAM,CAACgB,QAAP,GAAkB,EAAlB;AACAhB,QAAAA,MAAM,CAACiB,KAAP,GAAe,EAAf;AAEAJ,QAAAA,cAAc,CAACK,OAAf,CAAuBC,IAAI,IAAI;AAC3BL,UAAAA,SAAS,CAACI,OAAV,CAAkBE,IAAI,IAAI;AACtB,gBAAGpB,MAAM,CAACG,OAAP,KAAmBiB,IAAI,CAACZ,EAAxB,IAA8BR,MAAM,CAACC,OAAP,KAAmBkB,IAAI,CAACX,EAAzD,EAA6D;AACzDR,cAAAA,MAAM,CAACgB,QAAP,GAAkBG,IAAI,CAACA,IAAvB;AACAnB,cAAAA,MAAM,CAACiB,KAAP,GAAeG,IAAI,CAACH,KAApB;AACH;AACJ,WALD;AAMH,SAPD;AASA,YAAII,MAAM,GAAGrB,MAAM,CAACsB,aAAP,CAAqBC,OAArB,CAA6B,SAA7B,EAAwC,KAAxC,EAA+CA,OAA/C,CAAuD,UAAvD,EAAmE,KAAnE,CAAb;AACAvB,QAAAA,MAAM,CAACsB,aAAP,GAAuBD,MAAvB;AAEA,eAAOrB,MAAP;AACC,OAlBgB,CAAjB;AAoBAX,MAAAA,WAAW,CAAC0B,UAAD,CAAX;AACH,KA9ED;;AAgFAzB,IAAAA,SAAS;AAEZ,GAnFQ,EAmFN,CAACL,MAAD,CAnFM,CAAT,CANqB,CA2FrB;;AAEA,sBACI;AAAK,IAAA,SAAS,EAAC,EAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAI,IAAA,SAAS,EAAC,YAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kCADJ,eAEI;AAAK,IAAA,SAAS,EAAC,aAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKG,QAAQ,CAACW,GAAT,CAAa,CAACyB,OAAD,EAAUC,KAAV,kBACV;AAAK,IAAA,GAAG,EAAEA,KAAV;AAAiB,IAAA,SAAS,EAAC,aAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAK,IAAA,GAAG,EAAED,OAAO,CAACF,aAAlB;AAAiC,IAAA,GAAG,EAAC,WAArC;AAAiD,IAAA,SAAS,EAAC,UAA3D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,eAGI;AAAK,IAAA,SAAS,EAAC,gBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAI,IAAA,SAAS,EAAC,mBAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAmCE,OAAO,CAACE,SAA3C,CADJ,eAEI;AAAG,IAAA,SAAS,EAAC,mBAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAA4CF,OAAO,CAACG,YAApD,CAFJ,eAII,oBAAC,IAAD;AACA,IAAA,SAAS,EAAC,MADV;AAEA,IAAA,EAAE,EAAE;AACJC,MAAAA,QAAQ,EAAG,SAAQJ,OAAO,CAACP,KAAM;AAD7B,KAFJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAMI;AAAK,IAAA,SAAS,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAoCO,OAAO,CAACE,SAA5C,CANJ,CAJJ,CAHJ,CADH,CADL,CAFJ,CADJ;AA0BH,CAvHD;;AAyHA,eAAe1C,UAAf","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport Axios from 'axios';\nimport Config from '../Config';\nimport { Link } from 'react-router-dom';\n\nconst TopStreams = () => {\n\n    const oToken = sessionStorage.getItem('theToken');\n\n    const [channels, setChannels] = useState([]);\n\n    useEffect(() => {\n        const fetchData = async () => {\n            const result = await Axios.create({\n            headers: {\n                'Client-ID' : Config.clientID,\n                'Authorization' : 'Bearer ' + oToken\n            }\n            }).get('https://api.twitch.tv/helix/streams');\n\n            let dataArray = result.data.data;\n            // console.log(dataArray);\n\n            let gameIDs = dataArray.map( stream => {\n                return stream.game_id;\n            });\n\n            let userIDs = dataArray.map( stream => {\n                return stream.user_id;\n            });\n\n            //Creation des URLs personnalisées\n            let baseUrlGames = \"https://api.twitch.tv/helix/games?\"\n            let baseUrlUsers = \"https://api.twitch.tv/helix/users?\"\n\n            let queryParamsGame = \"\";\n            let queryParamsUsers = \"\";\n\n            gameIDs.map(id => {\n                return (queryParamsGame = queryParamsGame + `id=${id}&`)\n            });\n            userIDs.map(id => {\n                return (queryParamsUsers = queryParamsUsers + `id=${id}&`)\n            });\n\n            //URL final\n            let urlFinalGames = baseUrlGames + queryParamsGame;\n            let urlFinalUsers = baseUrlUsers + queryParamsUsers;\n\n            //Appels\n            let gamesNames = await Axios.create({\n            headers: {\n                'Client-ID' : Config.clientID,\n                'Authorization' : 'Bearer ' + oToken\n            }\n            }).get(urlFinalGames);\n            let getUsers = await Axios.create({\n            headers: {\n                'Client-ID' : Config.clientID,\n                'Authorization' : 'Bearer ' + oToken\n            }\n            }).get(urlFinalUsers);\n\n            let gamesNameArray = gamesNames.data.data;\n            let userArray = getUsers.data.data;\n\n            // console.log(gamesNameArray, userArray);\n\n            //Création du tableau final\n            let finalArray = dataArray.map(stream => {\n\n            stream.gameName = \"\";\n            stream.login = \"\";\n\n            gamesNameArray.forEach(name => {\n                userArray.forEach(user => {\n                    if(stream.user_id === user.id && stream.game_id === name.id) {\n                        stream.gameName = name.name;\n                        stream.login = user.login;\n                    }\n                })\n            });\n\n            let newUrl = stream.thumbnail_url.replace('{width}', \"320\").replace('{height}', \"180\");\n            stream.thumbnail_url = newUrl;\n\n            return stream\n            })\n\n            setChannels(finalArray);\n        }\n\n        fetchData();\n\n    }, [oToken])\n\n    // console.log(channels);\n\n    return(\n        <div className=\"\">\n            <h1 className=\"titreGames\">Stream les plus populaires</h1>\n            <div className=\"flexAccueil\">\n                {channels.map((channel, index) => ( \n                    <div key={index} className=\"carteStream\">\n                        <img src={channel.thumbnail_url} alt=\"image-jeu\" className=\"imgCarte\"/>\n\n                        <div className=\"cardBodyStream\">\n                            <h5 className=\"titreCartesStream\">{channel.user_name}</h5>\n                            <p className=\"txtStream viewers\">Viewers : {channel.viewer_count}</p>\n\n                            <Link\n                            className=\"lien\"\n                            to={{\n                            pathname: `/live/${channel.login}`\n                            }}\n                            >\n                                <div className=\"btnCarte\">Regarder {channel.user_name}</div>\n                            </Link>\n                        </div>\n                    </div>\n                ))}\n            </div>\n        </div>\n    )\n}\n\nexport default TopStreams;"]},"metadata":{},"sourceType":"module"}