{"ast":null,"code":"var _jsxFileName = \"/Users/oceane/Documents/Sites/clone-twitch/frontend/src/components/Live/index.js\";\nimport React, { useState, useEffect } from 'react';\nimport ReactTwitchEmbedVideo from 'react-twitch-embed-video';\nimport { useParams } from 'react-router-dom';\nimport Config from '../Config';\nimport Axios from 'axios';\n\nconst Live = () => {\n  //Le destructuring consiste à assigner des variables provenant d'un objet ou tableau en reposant sur leur structure. Ici slug vaut {slug: PseudoDuJoueur}, on recupère simplement la valeur de la propriété slug (grace aux {} autour de slug) pour avoir UNIQUEMENT la valeur: le slug\n  let {\n    slug\n  } = useParams(); // console.log(slug);\n\n  const [infoStream, setInfoStream] = useState([]);\n  const [infoGame, setInfoGame] = useState([]);\n  const oToken = sessionStorage.getItem('theToken');\n  useEffect(() => {\n    const fetchData = async () => {\n      const result = await Axios.create({\n        headers: {\n          'Client-ID': Config.clientID,\n          'Authorization': 'Bearer ' + oToken\n        }\n      }).get(`https://api.twitch.tv/helix/streams?user_login=${slug}`);\n      let gameID = result.data.data.map(gameid => {\n        return gameid.game_id;\n      });\n      const resultNomGame = await Axios.create({\n        headers: {\n          'Client-ID': Config.clientID,\n          'Authorization': 'Bearer ' + oToken\n        }\n      }).get(`https://api.twitch.tv/helix/games?id=${gameID}`); // console.log(resultNomGame);\n\n      let nomJeu = resultNomGame.data.data.map(gameName => {\n        return gameName.name;\n      });\n      setInfoGame(nomJeu);\n      setInfoStream(result.data.data[0]); // console.log(result);\n    };\n\n    fetchData();\n  }, []); //&nbsp = espace en html\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"containerDecale\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 2\n    }\n  }, /*#__PURE__*/React.createElement(ReactTwitchEmbedVideo, {\n    height: \"754\",\n    width: \"100%\",\n    channel: slug,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 2\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"contInfo\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 2\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"titreStream\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 2\n    }\n  }, infoStream.title), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"viewer\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 2\n    }\n  }, \"Viewers : \", infoStream.viewer_count), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"infoGame\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 2\n    }\n  }, \"Streamer : \", infoStream.user_name, \", \\xA0 Langue : \", infoStream.language), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"nomJeu\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 2\n    }\n  }, \"Jeu : \", infoGame)));\n};\n\nexport default Live;","map":{"version":3,"sources":["/Users/oceane/Documents/Sites/clone-twitch/frontend/src/components/Live/index.js"],"names":["React","useState","useEffect","ReactTwitchEmbedVideo","useParams","Config","Axios","Live","slug","infoStream","setInfoStream","infoGame","setInfoGame","oToken","sessionStorage","getItem","fetchData","result","create","headers","clientID","get","gameID","data","map","gameid","game_id","resultNomGame","nomJeu","gameName","name","title","viewer_count","user_name","language"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport ReactTwitchEmbedVideo from 'react-twitch-embed-video';\nimport { useParams } from 'react-router-dom';\nimport Config from '../Config';\nimport Axios from 'axios';\n\nconst Live = () => {\n\n //Le destructuring consiste à assigner des variables provenant d'un objet ou tableau en reposant sur leur structure. Ici slug vaut {slug: PseudoDuJoueur}, on recupère simplement la valeur de la propriété slug (grace aux {} autour de slug) pour avoir UNIQUEMENT la valeur: le slug\n let {slug} = useParams();\n // console.log(slug);\n\n const [infoStream, setInfoStream] = useState([]);\n const [infoGame, setInfoGame] = useState([]);\n\n const oToken = sessionStorage.getItem('theToken');\n\n useEffect(() => {\n const fetchData = async () => {\n const result = await Axios.create({\n headers: {\n 'Client-ID' : Config.clientID,\n 'Authorization' : 'Bearer ' + oToken\n }\n }).get(`https://api.twitch.tv/helix/streams?user_login=${slug}`);\n\n let gameID = result.data.data.map( gameid => {\n return gameid.game_id\n });\n\n const resultNomGame = await Axios.create({\n headers: {\n 'Client-ID' : Config.clientID,\n 'Authorization' : 'Bearer ' + oToken\n }\n }).get(`https://api.twitch.tv/helix/games?id=${gameID}`);\n // console.log(resultNomGame);\n\n let nomJeu = resultNomGame.data.data.map(gameName => {\n return gameName.name\n })\n\n setInfoGame(nomJeu);\n setInfoStream(result.data.data[0])\n // console.log(result);\n }\n\n fetchData();\n }, [])\n\n //&nbsp = espace en html\n return(\n <div className=\"containerDecale\">\n <ReactTwitchEmbedVideo height=\"754\" width=\"100%\" channel={slug}/>\n <div className=\"contInfo\">\n <div className=\"titreStream\">{infoStream.title}</div>\n <div className=\"viewer\">Viewers : {infoStream.viewer_count}</div>\n <div className=\"infoGame\">Streamer : {infoStream.user_name}, &nbsp; Langue : {infoStream.language}</div>\n <div className=\"nomJeu\">Jeu : {infoGame}</div>\n </div>\n </div>\n );\n}\n\nexport default Live;"]},"metadata":{},"sourceType":"module"}